@page "/ImportAttendance"
@inject AttendanceSystem.ImportFile.ui.Services.AttendanceService AttendanceService
@using AttendanceSystem.ImportFile.ui.Services
@using AttendanceSystem.ImportFile.ui.Shared
@using Microsoft.AspNetCore.Components.Forms

<div class="container mt-4">
    <div class="row mb-3">
        <div class="col-md-10 mx-auto">
            <h2 class="mb-4 text-center fw-bold" style="letter-spacing:1px; font-size:2.2rem;">Attendance Import</h2>
            <div class="d-flex justify-content-center align-items-center gap-3 mb-4">
                <InputFile OnChange="OnFileChange" class="form-control form-control-lg w-auto" />
                <button class="btn btn-primary btn-lg px-4 shadow-sm" style="font-size:1.15rem;" @onclick="() => UploadFile()" disabled="@(selectedFile == null)">
                    <i class="bi bi-upload me-2"></i>Upload File
                </button>
            </div>
            @if (!string.IsNullOrEmpty(message))
            {
                <div class="mb-3 d-flex justify-content-center">
                    <div class="alert @(message == "Saved successfully" ? "alert-success" : "alert-danger") shadow-sm px-5 py-3 fw-bold text-center" style="font-size:1.15rem; min-width:300px; max-width:500px;">
                        @message
                    </div>
                </div>
            }
        </div>
    </div>

    @if (pendingAttendance != null)
    {
        <div class="card shadow-sm">
            <div class="card-body">
                <h4 class="card-title mb-3">Pending Attendance Data</h4>
                <div class="table-responsive">
                    <table class="table table-striped table-hover table-bordered align-middle">
                        <thead class="table-light">
                            <tr>
                                <th>Employee ID</th>
                                <th>Date</th>
                                <th>Check In</th>
                                <th>Check Out</th>
                                <th>Status</th>
                                <th>Note</th>
                                <th>Edit</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var rec in pendingAttendance)
                            {
                                <tr>
                                    <td>@rec.EmployeeId</td>
                                    <td>
                                        @{
                                            string? dateStr = rec.Date.ToString();
                                            if (!string.IsNullOrEmpty(dateStr) && DateTime.TryParse(dateStr, out var dt))
                                            {
                                                @dt.ToString("yyyy-MM-dd")
                                            }
                                            else if (!string.IsNullOrEmpty(dateStr) && dateStr.Contains("T"))
                                            {
                                                @dateStr.Split('T')[0]
                                            }
                                            else
                                            {
                                                @dateStr
                                            }
                                        }
                                    </td>
                                    <td>
                                        @if (editRow == rec)
                                        {
                                            <input @bind="editCheckIn" class="form-control form-control-sm" />
                                        }
                                        else
                                        {
                                            @rec.CheckIn
                                        }
                                    </td>
                                    <td>
                                        @if (editRow == rec)
                                        {
                                            <input @bind="editCheckOut" class="form-control form-control-sm" />
                                        }
                                        else
                                        {
                                            @rec.CheckOut
                                        }
                                    </td>
                                    <td>
                                        @if (editRow == rec)
                                        {
                                            <select @bind="editStatus" class="form-select form-select-sm">
                                                @foreach (var status in Enum.GetValues<AttendanceStatus>())
                                                {
                                                    <option value="@status">@status</option>
                                                }
                                            </select>
                                        }
                                        else
                                        {
                                            @rec.Status
                                        }
                                    </td>
                                    <td>
                                        @if (editRow == rec)
                                        {
                                            <input @bind="editNote" class="form-control form-control-sm" />
                                        }
                                        else
                                        {
                                            @rec.Note
                                        }
                                    </td>
                                    <td>
                                        @if (editRow == rec)
                                        {
                                            <button class="btn btn-success btn-sm me-1" @onclick="() => SaveEdit(rec)">Save</button>
                                            <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-outline-primary btn-sm" @onclick="() => StartEdit(rec)">Edit</button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="d-flex justify-content-center">
                    <button class="btn btn-success btn-lg px-5 mt-3 shadow-sm" style="font-size:1.2rem;" @onclick="SaveAll">
                        <i class="bi bi-database-check me-2"></i>Save All to Database
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    IBrowserFile? selectedFile;
    List<AttendanceRecord>? pendingAttendance;
    AttendanceRecord? editRow;
    string? editCheckIn;
    string? editCheckOut;
    AttendanceStatus? editStatus;
    string? editNote;
    string? message;

    void OnFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    async Task UploadFile()
    {
        if (selectedFile == null) return;
        var content = new MultipartFormDataContent();
        var stream = selectedFile.OpenReadStream(10 * 1024 * 1024); // 10MB max
        content.Add(new StreamContent(stream), "file", selectedFile.Name);
        pendingAttendance = await AttendanceService.UploadCsvAsync(content);
        message = pendingAttendance == null ? "File upload failed" : null;
        StateHasChanged();
    }

    void StartEdit(AttendanceRecord rec)
    {
        editRow = rec;
        editCheckIn = rec.CheckIn;
        editCheckOut = rec.CheckOut;
        editStatus = rec.Status;  
        editNote = rec.Note;
    }

    void CancelEdit()
    {
        editRow = null;
    }

    async Task SaveEdit(AttendanceRecord rec)
    {
        if (editRow == null) return;
        var dto = new EditAttendanceDto
        {
            EmployeeId = rec.EmployeeId,
            Date = rec.Date,
            CheckIn = editCheckIn ?? "",
            CheckOut = editCheckOut ?? "",
            Status = editStatus ?? rec.Status,
            Note = editNote
        };
        var ok = await AttendanceService.EditPendingAttendanceAsync(dto);
        if (ok)
        {
            rec.CheckIn = editCheckIn ?? "";
            rec.CheckOut = editCheckOut ?? "";
            rec.Note = editNote;
            rec.Status = editStatus ?? rec.Status;
            editRow = null;
        }
        else
        {
            message = "Edit failed";
        }
    }

    async Task SaveAll()
    {
        var ok = await AttendanceService.SaveAttendanceAsync();
        message = ok ? "Saved successfully" : "Save failed";
        if (ok) pendingAttendance = null;
    }
}
