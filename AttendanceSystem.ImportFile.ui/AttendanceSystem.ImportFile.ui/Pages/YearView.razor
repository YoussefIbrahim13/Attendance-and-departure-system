@page "/calendar/year"
@page "/calendar/year/{Year:int}"
@inject AttendanceSystem.ImportFile.ui.Services.AttendanceService AttendanceService
@inject NavigationManager Navigation
@inject AttendanceService AttendanceService
@using AttendanceSystem.ImportFile.ui.Services
@using AttendanceSystem.ImportFile.ui.Shared

<div class="container-fluid mt-4">
    <!-- Header & Navigation -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="mb-0 fw-bold">Year @currentYear</h2>
                <div class="btn-group">
                    <button class="btn btn-outline-primary" @onclick="PreviousYear">
                        <i class="bi bi-chevron-left"></i> @(currentYear - 1)
                    </button>
                    <button class="btn btn-outline-primary" @onclick="NextYear">
                        @(currentYear + 1) <i class="bi bi-chevron-right"></i>
                    </button>
                    <button class="btn btn-primary ms-2" @onclick="GoToCurrentMonth">
                        <i class="bi bi-calendar-month"></i> Current Month
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (yearData != null)
    {
        <div class="year-grid">
            @foreach (var month in yearData.Months)
            {
                <div class="month-card @(IsCurrentMonth(month.Month) ? "current-month" : "")"
                     @onclick="() => GoToMonth(month.Month)">
                    <div class="month-header">
                        <h4 class="month-name">@month.MonthName</h4>
                        <div class="month-number">@month.Month.ToString("00")</div>
                    </div>

                    <div class="month-stats">
                        <div class="stat-item">
                            <div class="stat-label">Working Days</div>
                            <div class="stat-value">@month.TotalWorkingDays</div>
                        </div>

                        <div class="stat-item">
                            <div class="stat-label">Avg Attendance</div>
                            <div class="stat-value">@month.AverageAttendance%</div>
                        </div>
                    </div>

                    <div class="attendance-bar">
                        <div class="attendance-fill" style="width: @(month.AverageAttendance)%"></div>
                    </div>

                    <div class="month-footer">
                        <small class="text-muted">Click to view month</small>
                    </div>
                </div>
            }
        </div>

        <!-- Year Summary -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Year @currentYear Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="summary-stat">
                                    <div class="summary-value">@GetTotalWorkingDays()</div>
                                    <div class="summary-label">Total Working Days</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="summary-stat">
                                    <div class="summary-value">@GetAverageAttendance()%</div>
                                    <div class="summary-label">Average Attendance</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="summary-stat">
                                    <div class="summary-value">@GetBestMonth()</div>
                                    <div class="summary-label">Best Month</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="summary-stat">
                                    <div class="summary-value">@GetWorstMonth()</div>
                                    <div class="summary-label">Needs Improvement</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .year-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .month-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        padding: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

        .month-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            border-color: #007bff;
        }

        .month-card.current-month {
            border-color: #28a745;
            background: linear-gradient(135deg, #f8fff9 0%, #ffffff 100%);
        }

    .month-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 2px solid #f1f3f4;
    }

    .month-name {
        margin: 0;
        color: #333;
        font-weight: 600;
    }

    .month-number {
        background: #007bff;
        color: white;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 14px;
    }

    .current-month .month-number {
        background: #28a745;
    }

    .month-stats {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
        margin-bottom: 15px;
    }

    .stat-item {
        text-align: center;
    }

    .stat-label {
        font-size: 12px;
        color: #6c757d;
        margin-bottom: 5px;
        font-weight: 500;
    }

    .stat-value {
        font-size: 18px;
        font-weight: bold;
        color: #333;
    }

    .attendance-bar {
        background: #e9ecef;
        height: 8px;
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 15px;
    }

    .attendance-fill {
        height: 100%;
        background: linear-gradient(90deg, #dc3545 0%, #ffc107 50%, #28a745 100%);
        transition: width 0.3s ease;
        border-radius: 4px;
    }

    .month-footer {
        text-align: center;
    }

    .summary-stat {
        text-align: center;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .summary-value {
        font-size: 24px;
        font-weight: bold;
        color: #007bff;
        margin-bottom: 5px;
    }

    .summary-label {
        font-size: 14px;
        color: #6c757d;
        font-weight: 500;
    }

    
</style>

@code {
    [Parameter] public int Year { get; set; }

    private YearViewDto? yearData;
    private bool isLoading = true;
    private int currentYear;

    protected override async Task OnInitializedAsync()
    {
        currentYear = Year > 0 ? Year : DateTime.Today.Year;
        await LoadYearData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Year > 0) currentYear = Year;
        await LoadYearData();
    }

    private async Task LoadYearData()
    {
        isLoading = true;
        try
        {
            yearData = await AttendanceService.GetYearViewAsync(currentYear);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error loading year data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void PreviousYear() => Navigation.NavigateTo($"/calendar/year/{--currentYear}");
    private void NextYear() => Navigation.NavigateTo($"/calendar/year/{++currentYear}");
    private void GoToCurrentMonth() => Navigation.NavigateTo($"/calendar/month/{DateTime.Today.Year}/{DateTime.Today.Month}");
    private void GoToMonth(int month) => Navigation.NavigateTo($"/calendar/month/{currentYear}/{month}");
    private bool IsCurrentMonth(int month) => currentYear == DateTime.Today.Year && month == DateTime.Today.Month;

    private int GetTotalWorkingDays() => yearData?.Months.Sum(m => m.TotalWorkingDays) ?? 0;
    private double GetAverageAttendance() => yearData?.Months.Any() == true ? Math.Round(yearData.Months.Average(m => m.AverageAttendance), 1) : 0;
    private string GetBestMonth() => yearData?.Months.Any() == true ? yearData.Months.OrderByDescending(m => m.AverageAttendance).First().MonthName : "N/A";
    private string GetWorstMonth() => yearData?.Months.Any() == true ? yearData.Months.OrderBy(m => m.AverageAttendance).First().MonthName : "N/A";
}

